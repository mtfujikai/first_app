class CreatePosts < ActiveRecord::Migration[6.0]
  def change
    create_table :posts do |t|
      t.text :content #t.カラムの型 :カラム名
      t.timestamps
    end
  end
end

#カラムの型にはいくつか種類がある
#カラムの型 : 説明 : 用途
#integer  : 数値 : 金額や回数などをまとめる
#string   : 文字(短文) : ユーザー名やメールアドレスなど
#text     : 文字(長文) : 投稿文や説明文など
#boolean  : 真か偽か   : はい・いいえの選択、合否のフラグなど
#datetime : 日付と時刻 : 作成日時、更新日時など

#マイグレーションとはテーブルの設計図、仕様書です。
#どのようなテーブルにするのかをマイグレーションファイル内へ記載します。
#モデルは作成できてもそのモデルが管理するテーブルはまだ作成できていない。
#マイグレーションを編集してどのようなテーブルにするかを決める。

#マイグレーションの実行は rails db:migrateコマンドを実行する
#これはマイグレーションに記述した内容を、データベースに適用するためのコマンド
#マイグレーションは一度実行すると再度実行はできないので、
#テーブルがもつカラムの内容を編集して再度実行して修正はできない
#(設計書であるマイグレーションの変更履歴を見るようにするため)

#ではどうしてマイグレーションの編集を行うか。
#rails db:rollbackコマンド = マイグレーション実行による変更を差し戻すため
 #rails db:rollback - マイグレーションの修正 - rails db:migrateで修正
 #マイグレーションファイルがupとdownにstatusがupとdownの状態がある
 #upの状態の際は修正はできないがterminalにてrails db:rollbackコマンドを実行すると
 #statusがdownに変わり、マイグレーションファイルを修正が可能になる

#作成したテーブルにデータを追加していく方法
#Sequel Proにて直接入力する
#idは字自動入力されるので入力不要
#contentのしたに続く枠をダブルクリックするとテキストが入力できるようになる
#文書を入力した後はcreated_atとupdated_atには日時データを記述する

#コンソールとは、ターミナルからアプリケーションの操作をする仕組みのこと
#irbもコンソールの一種

#Railsアプリのディレクトリでrails cを使用することで、
#railsアプリをコンソールから操作可能

post = Post.new #Postがクラスのインスタンス変数の定義
post.content = "こんにちは" #post.contentに文字列のこんにちはを代入
post.saves #一連を保存
exit #終わり

#データを保存するときは 「インスタンスを生成→インスタンスの中身を上書きする→インスタンスを保存」

#AcitiveRecordメソッド = モデルを利用して、テーブルからデータを取得するために必要
#all = テーブルの全てのデータを取得する
#find = テーブルのレコードのうち、ある一つのデータを取得する
#new = クラスのインスタンス(レコード)を生成する
#save = クラスのインスタンス(レコード)を保存する

#allメソッドを使用するう場合、そのままall.コラム名と繋げると
#どのコラムを参照していいか分からずエラーが出る
#each do ||(インスタンス変数)でこの問題は解決できる。


